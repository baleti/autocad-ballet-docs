* 2025
** August
*** 21
**** =12:25= getstring command feels clunky
:PROPERTIES:
:ID:       3fcf8dd5-0461-4278-9b17-9005fc13f9e4
:END:
when dynamic input is turned on ctrl+v doesn't work, pasteclip command is invoked instead
pressing space is interpreted as confirmation of the command rather than space in the string unless double quotes are used
for the command I'm setting up (rename tabs) a preview similar to that in rename commands in revit-ballet would be more practical
***** autolisp doesn't seem to have robust facilities for creating windows/windows forms
seems to expect separate .dcl files
writing them in the same files seems hard to modify
may move this command to .net instead
*** 22
**** =10:03= batch processing of multiple documents opened in a single autocad process
ai suggests that .net may offer better faciilities to manage multiple opened documents
autolisp scripts resorted to activex, which although worked, sounds like a legacy solution that wouldn't be suitable for going forward
**** =14:48= it feels wrong, but I may have to port command invoker from revit-ballet to autocad-ballet
***** autocad builtin command line doesn't let you search by mutliple substrings
command SelectXrefs would ideall be sought by "sel xr"
instead builtin autocad command treats space as confirmation
this requires typing "selectx" to find SelectXrefs command
with likely future larger amount of Select- commands this will become cumbersome
***** issues [[id:3fcf8dd5-0461-4278-9b17-9005fc13f9e4][described above]]
***** during testing limitations of netload surfaced up
[2025-08-31 Sun 15:14]
a dll assembly can't be reloaded
a .net registered command can't be unregistered
decided to abandon idea of integrating with autocad command line and simply invoke commands in the same way as in revit
***** ended up keeping dotnet code in a single dll and both register commands in autocad and invoke them from InvokeAddinCommand
InvokeAddinCommand should prove useful when developing new commands
registering commands in autocad directly likely brings benefits later
  aliases, autodesk app store
*** 28
**** =13:00= it took me a while to switch to dotnet cli and emacs-based workflow for c#
as opposed to previous visual studio gui
still need to work out debugging and lsp support in emacs
** September
*** 03
**** =13:00= decided to use acad.lsp for autoloading instead of autodesk app store-based bundle format
*** 04
**** =13:00= decided to write a custom installer instead of using autodesk/windows frameworks
acad.lsp-based workflow is both simple and bespoke, so popular framework will likely only get in the way
***** implementation
[2025-09-06 Sat 22:23]
****** detect support paths of installed autocad products from windows registry RoamableRootFolder
****** add %appdata%/autocad-ballet to trusted paths in user profile
otherwise every lisp file would trigger warning on first load (and future updates)
if I knew it would be necessary sooner I would have [[id:dd7388c6-595a-434d-8cf4-0086b44a45b6][designed netload]] so it creates a separate DLLs for each session
*** 05
**** =14:00= decided to keep documentation for this project up-to-date this time
use hugo static site generator to make it pretty
create one .org file per command, likely one page listing them all
move journal there too
*** 06
**** =01:30= simplify updating of .net assembly, avoid locking through separate copies in %temp% directory
:PROPERTIES:
:ID:       dd7388c6-595a-434d-8cf4-0086b44a45b6
:END:
instead of loading .dll from %appdata% directly a copy is created to %temp%/autocad-ballet/autocad-ballet.dll via acad.lsp script (on each start of autocad)
a single dll is used by all autocad processes (same name) to avoid prompting user for permission each time
InvokeAddinCommand can still load newer commands from the main dll in %appdata% without locking (as before)
recompilation of the main .dll in %appdata% is simplified a bit
this possibly could have been simplified by trying to set this location to be trusted via registry (if possible at all)
  but it seems much more intrusive
***** unexpectedly vl-copy-file function in autolisp doesn't have an option to preserve date modified when copying file
this kept triggering user prompt to trust a file
had to resort to COM object Scripting.FileSystemObject
I was told these are well-maintained for some time now
didn't want to spawn a cmd.exe that would perform xcopy instead
***** separate autocad-ballet.dlls per process instead of sharing it across all processes
[2025-09-09 Tue 01:40]
trusted path warnings and having to close all autocad processes only to reload .net assembly was cumbersome
  invokeaddincommand still works well for testing, but once done you may want to start using command directly from autocad
    this new design should simplify this
previously dissuaded, because didn't consider adding them to trusted paths
into %appdata%/.../temp instead of %temp%
**** =15:53= moved .csproj files to folders with .cs files
dotnet build requires less modifications (Inlcude xml elements) and as project progresses this organization makes sense
similar to Makefiles in a way
at the beginning when project seemed to require only a single .csproj it seemed simpler to keep only a single .csproj in root
**** =18:52= reviewing frameworks for managing documentation
hugo still seems best, most maintainable
looked into mkdocs, docosaurus, jakyll, wordpress and plain html/css/js
mkdocs material theme usefully showed the main components of documentation site
  search bar, site tree, table of contents, contents page
plain html is tempting, but translations will be needed even for turning org mode into html
  if invoking code to render html can't be avoided then may as well leverage hugo
*** 07
**** =16:08= major redesign to support multiversion in a single project
***** trying to leverage "sdk-style" csproj and TargetFrameworks feature
mentioned on [[https://thebuildingcoder.typepad.com/blog/2018/06/multi-targeting-revit-versions-cad-terms-texture-maps.html#2][buidling coder in 2018]] as an improvement compared to previous methods
I hope that it will allow targetting multiple frameworks or even multiple higher-level configurations
sadly it didn't work, duplicate .net frameworks conflicted with each other
#+begin_src xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>acad2017;acad2018;...;acad2026</TargetFrameworks>
    ...
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' == 'acad2017'">
    <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <AssemblyName>autocad-ballet-2017</AssemblyName>
    <DefineConstants>ACAD2017</DefineConstants>
    <AutoCADYear>2017</AutoCADYear>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' == 'acad2018'">
    <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <AssemblyName>autocad-ballet-2018</AssemblyName>
    <DefineConstants>ACAD2018</DefineConstants>
    <AutoCADYear>2018</AutoCADYear>
  </PropertyGroup>
  ...
  <PropertyGroup Condition="'$(TargetFramework)' == 'acad2026'">
    <TargetFrameworkIdentifier>.NETCoreApp</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v8.0</TargetFrameworkVersion>
    <TargetPlatformIdentifier>Windows</TargetPlatformIdentifier>
    <AssemblyName>autocad-ballet-2026</AssemblyName>
    <DefineConstants>ACAD2026</DefineConstants>
    <AutoCADYear>2026</AutoCADYear>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="*.cs" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'acad2017'">
    <PackageReference Include="AutoCAD.NET" Version="21.0.2" ExcludeAssets="runtime" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'acad2018'">
    <PackageReference Include="AutoCAD.NET" Version="22.0.0" ExcludeAssets="runtime" />
  </ItemGroup>
  ...
  <ItemGroup Condition="'$(TargetFramework)' == 'acad2026'">
    <PackageReference Include="AutoCAD.NET" Version="25.1.0" ExcludeAssets="runtime" />
  </ItemGroup>
</Project>
#+end_src
***** script build process
****** downgrade codebase to c# 7.3 unless necessary
compiler defines/constants allow for ~#if ACAD2025~ blocks
but that makes code less readbale and most features seem to be only a syntatic sugar
****** couldn't kept using --output (-o) option with multiple builds to a single directory
dotnet kept deleting previous ones in a dlat directory
I suppose that's for the better though as folders will become necessary when other dependencies come in
*** 08
**** =12:56= registering commands in autocad requries an "attribute"
[assembly: CommandClass(typeof(AutoCADBallet.FilterSelectedCommand))]
InvokeAddinCommand picks them up even without it
caught me off guard
*** 09
**** =23:56= reservations about running git repo from %appdata% folder also used by autocad for runtime data/configuration
put them into a separate folder for now
keeping everything in one place may have future advantages and simplify design
  don't have to  adjust build scripts (ost-built commands) copying binaries across
    although this might be bridged with symlinks (even on windows)
